#!/bin/bash

# Author: Scott R. Shinn <scott@atomicorp.com>
# https://www.atomicorp.com

# This program is free software; you can redistribute it and/or modify
# it under the terms of the Affero GNU General Public License 
#

VERSION=5.0.0

# Functions

# Input validation function 
# check_input <msg> <valid responses regex> <default>
# if <default> is passed on as null, then there is no default
# Example: check_input  "Some question (yes/no) " "yes|no"  "yes"
function check_input {
  message=$1
  validate=$2
  default=$3

  while [ $? -ne 1 ]; do
    echo -n "$message "
    read INPUTTEXT < /dev/tty
    if [ "$INPUTTEXT" == "" -a "$default" != "" ]; then
      INPUTTEXT=$default
      return 1
    fi
    echo $INPUTTEXT | egrep -q "$validate" && return 1
    echo "Invalid input"
  done
}

function download_update() {
	RETRIES=0
	DOWNLOAD_SUCCESS=0
	COMMAND=$1
	OPTIONS=$2

	while [ $DOWNLOAD_SUCCESS -lt 1 ]; do
		if [ $RETRIES -gt 2 ]; then
			echo "Download not successful: too many failed attempts"
			echo "  rerun  $COMMAND manually"
			return 
		fi

		su - gvm -c "$COMMAND $OPTIONS"

		if [ $? -eq 0 ] ; then
			echo "$COMMAND success"
			DOWNLOAD_SUCCESS=1
		else
			echo "Retrying in 3 seconds..."
			sleep 3
			RETRIES=$(( $RETRIES + 1 ))
		fi
	done

}


echo
echo "GVM Setup, Version: $VERSION"
echo 

# Test for selinux
if [ -f /usr/sbin/getenforce ]; then
SELINUX=$(getenforce 2>/dev/null)
	if [ $? -eq 0 ] ; then
		if [ "$SELINUX" != "Disabled" ]; then
			echo "Error: Selinux is set to ($SELINUX)"
			echo "  selinux must be disabled in order to use openvas"
			echo "  exiting...."
			exit 1
		fi
	fi
fi

# TODO: Python check
alternatives --list |grep python


# Set up postgres
yum -y install postgresql-server postgresql-contrib
postgresql-setup initdb
systemctl start postgresql

su - postgres -c "createuser -DRS gvm"
su - postgres -c "createdb -O gvm gvmd"
su - postgres -c "psql gvmd -q --command='create role dba with superuser noinherit;'"
su - postgres -c "psql gvmd -q --command='grant dba to gvm;'"
su - postgres -c "psql gvmd -q --command='create extension \"uuid-ossp\";'"
su - postgres -c "psql gvmd -q --command='create extension \"pgcrypto\";'"
systemctl restart postgresql




# redis setup
if [  -f /etc/redis.conf ]; then
	REDIS_CONF=/etc/redis.conf
elif [ -f /etc/redis/redis.conf ]; then
	REDIS_CONF=/etc/redis/redis.conf
else
	echo "Error: Redis configuration was not detected"
	exit 1
fi


if ! grep -q "^unixsocket /var/run/redis/redis.sock" $REDIS_CONF ; then
  	sed -i -e 's/^\(#.\)\?unixsocket \/.*$/unixsocket \/var\/run\/redis\/redis.sock/' $REDIS_CONF
fi


if ! grep -q ^unixsocketperm.*770 $REDIS_CONF; then
  	sed -i -e 's/^\(#.\)\?unixsocketperm.*$/unixsocketperm 770/' $REDIS_CONF
  	sed -i -e 's/^\(#.\)\?port.*$/port 0/' $REDIS_CONF
fi

# Bugfix for openvas (temporary)
sed -i "s/^save/#save/g" $REDIS_CONF

if grep ^db_address /etc/openvas/openvassd.conf 2>/dev/null; then
	sed -i -e 's/db_address=.*$/db_address=\/var\/run\/redis\/redis.sock/' /etc/openvas/openvas.conf
else
	echo "db_address=/var/run/redis/redis.sock" >> /etc/openvas/openvas.conf
fi

# Add uer to redis socket
if ! groups gvm |grep -q redis ; then
	usermod -aG redis gvm
fi

systemctl enable redis
systemctl start redis

# TODO: Fixing huge memory pages
#sysctl -w net.core.somaxconn=1024
#sysctl vm.overcommit_memory=1
#
#echo "net.core.somaxconn=1024"  >> /etc/sysctl.conf
#echo "vm.overcommit_memory=1" >> /etc/sysctl.conf

# TODO: Disable transparent hugepages
#   grub2-editenv - list | grep kernelopts <- test for it
#  grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) transparent_hugepage=never"



# Download NVT updates
echo
echo "Update NVT, CERT, and SCAP data"
echo "Please note this step could take some time."
echo "Once completed, this will be updated automatically every 24 hours"
echo

# TODO: do these need to go in as the openvas user?
echo
echo "Updating NVTs...." 
# TODO: Ok I must have messed up a directory or something, or maybe its OK? Its got subdirs
# 
download_update /usr/sbin/greenbone-nvt-sync 


echo
echo "Updating CERT data..."
download_update /usr/sbin/greenbone-certdata-sync  


echo
echo "Updating SCAP data..."
download_update /usr/sbin/greenbone-scapdata-sync 

su - gvm -c "openvas --update-vt-info"


# Handle certs
echo
echo -n "Updating OpenVAS Manager certificates: "
/usr/bin/gvm-manage-certs -V >/dev/null 2>&1
if [ $? -ne 0 ]; then
	/usr/bin/gvm-manage-certs -a  >/dev/null 2>&1
	echo "Complete"
else
	echo "Already Exists"
fi
echo


# Start openvas manager, use rngd to speed up the key process
if  [ -f /usr/sbin/rngd ]; then
	pidof rngd > /dev/null
	if [[ $? -ne 0 ]]; then
		rngd -r /dev/urandom
	fi
fi

if [  -f /var/lib/openvas/mgr/tasks.db ]; then
	/usr/sbin/gvmd --migrate --progress 
fi

# Set up postgres
yum -y install postgresql-server postgresql-contrib
postgresql-setup initdb
systemctl start postgresql

su - postgres -c "createuser -DRS gvm" 
su - postgres -c "createdb -O gvm gvmd"
su - postgres -c "psql gvmd -q --command='create role dba with superuser noinherit;'"
su - postgres -c "psql gvmd -q --command='grant dba to gvm;'"
su - postgres -c "psql gvmd -q --command='create extension \"uuid-ossp\";'"
su - postgres -c "psql gvmd -q --command='create extension \"pgcrypto\";'"
systemctl restart postgresql

# TODO: needed?
/usr/sbin/service gvmd restart  >/dev/null 2>&1




if ! /usr/sbin/gvmd --get-users | grep -q ^admin$ ; then

	# Configure Admin user
	echo 
	echo "Step 2: Choose the GSAD admin users password."
	echo "The admin user is used to configure accounts,"
	echo "Update NVT's manually, and manage roles."
	echo 

	echo -n "Enter administrator username [Default: admin] : "
	read USERNAME

	if [ "$USERNAME" == "" ]; then
		USERNAME=admin
	fi

	# Suppress output of password.
	if [[ -t 0 ]]; then
		stty -echo
	fi

	# Prompt the user for the desired password and verify its accuracy.  
	PASSCONFIRMED=0
	while [ $PASSCONFIRMED -lt 1 ]; do
		echo -n "Enter Administrator Password: "
		read PASSWORD 
		echo

		echo -n "Verify Administrator Password: "
		read PASSWORD2 
		echo


		if [ "$PASSWORD" == "$PASSWORD2" ]; then
			if [ "$PASSWORD" == "" ]; then
				echo "Empty password not allowed."
				PASSCONFIRMED=0
			else
				PASSCONFIRMED=1
			fi
			echo
		else
			echo "Passwords do not match"
			echo
		fi
	done
	stty echo


	# Create admin user
	/usr/sbin/gvmd  --create-user=$USERNAME >/dev/null 2>&1
	/usr/sbin/gvmd  --user=$USERNAME --new-password=$PASSWORD

fi

echo
echo "Setup complete, you can now access GSAD at:"
echo "  https://<IP>:9392"
echo

# Stop rngd
if [ -f /usr/sbin/rngd ]; then
	killall rngd
fi

service gsad restart

# Add to startup for systemd based systems
if [ -x /bin/systemctl ]; then
	systemctl enable openvas-scanner
	systemctl enable gvmd
	if [ -f /lib/systemd/system/greenbone-security-assistant.service ]; then
      		systemctl enable greenbone-security-assistant
	else
      		systemctl enable gsad
	fi
		
fi

# End

